{"version":3,"sources":["webpack:///./src/js/services/QuestionnaireDataService.js"],"names":["QuestionnaireDataService","questionnaireID","query","GraphQLRequestHelper","prepareRequest","request","response","json","data","memberData","_","get","questionnaireData","siteData","DEFAULT_NETWORK_ERROR","title","subtitle","keyInformation","user","name","role","email"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AACA;AACA;;IAEqBA,wB;;;;;;;;;;;;+CAESC,e;;;;;;AACpBC,qB,iIAQgBD,e;;uBAWCE,mEAAoB,CAACC,cAArB,CAAoCF,KAApC,EAA2CG,OAA3C,E;;;AAAjBC,wB;AACAC,oB,GAAOD,QAAQ,CAACE,I;AAEhBC,0B,GAAaC,6CAAC,CAACC,GAAF,CAAMJ,IAAN,EAAY,0BAAZ,EAAwC,IAAxC,C;AACbK,iC,GAAoBF,6CAAC,CAACC,GAAF,CAAMJ,IAAN,EAAY,wBAAZ,EAAsC,IAAtC,C;AACpBM,wB,GAAWH,6CAAC,CAACC,GAAF,CAAMJ,IAAN,EAAY,uBAAZ,EAAqC,IAArC,C;;sBAEd,CAACE,UAAD,IAAe,CAACG,iBAAhB,IAAqC,CAACC,Q;;;;;sBACjCC,uE;;;iDAGD;AACLC,uBAAK,EAAEL,6CAAC,CAACC,GAAF,CAAMC,iBAAN,EAAyB,MAAzB,EAAiC,EAAjC,CADF;AAELI,0BAAQ,EAAEN,6CAAC,CAACC,GAAF,CAAME,QAAN,EAAgB,OAAhB,EAAyB,EAAzB,CAFL;AAGLZ,iCAAe,EAAES,6CAAC,CAACC,GAAF,CAAMC,iBAAN,EAAyB,IAAzB,EAA+B,EAA/B,CAHZ;AAILK,gCAAc,EAAEP,6CAAC,CAACC,GAAF,CAAMC,iBAAN,EAAyB,gBAAzB,EAA2C,EAA3C,CAJX;AAKLM,sBAAI,EAAE;AACJC,wBAAI,YAAKT,6CAAC,CAACC,GAAF,CAAMF,UAAN,EAAkB,WAAlB,CAAL,cAAuCC,6CAAC,CAACC,GAAF,CAAMF,UAAN,EAAkB,SAAlB,CAAvC,CADA;AAEJW,wBAAI,EAAEV,6CAAC,CAACC,GAAF,CAAMF,UAAN,EAAkB,UAAlB,CAFF;AAGJY,yBAAK,EAAEX,6CAAC,CAACC,GAAF,CAAMF,UAAN,EAAkB,OAAlB;AAHH;AALD,iB","file":"hot/hot-update.js","sourcesContent":["// @flow\n\nimport type {QuestionnaireStartState} from \"../store/QuestionnaireState\";\nimport GraphQLRequestHelper from \"../utils/GraphQLRequestHelper\";\nimport _ from \"lodash\";\nimport {DEFAULT_NETWORK_ERROR} from \"../constants/errors\";\n\nexport default class QuestionnaireDataService {\n\n  static async fetchStartData(questionnaireID: string): Promise<QuestionnaireStartState> {\n    const query = `\nquery {\n  readCurrentMember {\n    Email\n    FirstName\n    Surname\n    UserRole\n  }\n  readQuestionnaire(ID: ${questionnaireID}) {\n    ID\n    Name\n    KeyInformation\n  }\n  readSiteConfig {\n    Title\n  }\n}\n`;\n\n    const response = await GraphQLRequestHelper.prepareRequest(query).request();\n    const json = response.data;\n\n    const memberData = _.get(json, \"data.readCurrentMember.0\", null);\n    const questionnaireData = _.get(json, \"data.readQuestionnaire\", null);\n    const siteData = _.get(json, \"data.readSiteConfig.0\", null);\n\n    if(!memberData || !questionnaireData || !siteData) {\n      throw DEFAULT_NETWORK_ERROR;\n    }\n\n    return {\n      title: _.get(questionnaireData, \"Name\", \"\"),\n      subtitle: _.get(siteData, \"Title\", \"\"),\n      questionnaireID: _.get(questionnaireData, \"ID\", \"\"),\n      keyInformation: _.get(questionnaireData, \"KeyInformation\", \"\"),\n      user: {\n        name: `${_.get(memberData, \"FirstName\")} ${_.get(memberData, \"Surname\")}`,\n        role: _.get(memberData, \"UserRole\"),\n        email: _.get(memberData, \"Email\"),\n      },\n    };\n  }\n}\n"],"sourceRoot":""}